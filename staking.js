/* staking.js ‚Äî Web3.js full version (robust)
   ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å wallet.js: web3, account, usdt, staker, router
   ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°/element id ‡∏ï‡∏≤‡∏° index.html: quoteBox, uiStakedLP, uiLastClaim, uiNextClaim, uiUnlockAt, uiCanWithdraw, uiRefRewards, btnClaimStake, btnClaimRef, btnWithdraw
*/

function toast(msg){ try{ alert(msg); }catch(_){} console.log(msg); }

// ---------- Referral ----------
async function setReferrer() {
  try {
    const ref = document.getElementById("refAddress").value.trim();
    if (!web3.utils.isAddress(ref)) return toast("Referrer ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    const gas = await staker.methods.setReferrer(ref).estimateGas({ from: account }).then(g=>Math.floor(g*1.15));
    const p = staker.methods.setReferrer(ref).send({ from: account, gas });
    p.on("transactionHash", h => toast("üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Referrer ‡πÅ‡∏•‡πâ‡∏ß\nTx: "+h))
     .on("receipt", () => toast("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Referrer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"));
    await p;
    localStorage.setItem("kjc_referrer", ref);
  } catch (e) { console.error(e); toast("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "+(e?.message||e)); }
}

// ---------- Quote / Buy & Stake ----------
async function quoteKJC() {
  try {
    if (!account) return toast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡πà‡∏≠‡∏ô");
    const amount = document.getElementById("usdtAmount").value;
    if (!amount || Number(amount) <= 0) return toast("‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏Å‡πà‡∏≠‡∏ô");
    const usdtWei = web3.utils.toWei(amount, "ether"); // USDT 18d
    const out = await router.methods.getAmountsOut(usdtWei, [CONFIG.usdt, CONFIG.kjc]).call();
    const kjcOut = web3.utils.fromWei(out[1], "ether");
    document.getElementById("quoteBox").innerText = `‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ ~ ${kjcOut} KJC`;
  } catch (e) { console.error(e); toast("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "+(e?.message||e)); }
}

async function buyAndStake() {
  try {
    if (!account) return toast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡πà‡∏≠‡∏ô");
    const amount = document.getElementById("usdtAmount").value;
    if (!amount || Number(amount) <= 0) return toast("‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏Å‡πà‡∏≠‡∏ô");
    const usdtWei = web3.utils.toWei(amount, "ether");

    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ BNB ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏Å‡πä‡∏™
    const bnbBal = await web3.eth.getBalance(account);
    if (web3.utils.toBN(bnbBal).isZero()) return toast("‡πÄ‡∏ï‡∏¥‡∏° BNB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡πä‡∏™‡∏ö‡∏ô BSC ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");

    // 1) Approve USDT ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const allowance = await usdt.methods.allowance(account, CONFIG.autoStaker).call();
    if (web3.utils.toBN(allowance).lt(web3.utils.toBN(usdtWei))) {
      toast("‚è≥ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Approve USDT‚Ä¶");
      const gas1 = await usdt.methods.approve(CONFIG.autoStaker, usdtWei).estimateGas({ from: account }).then(g=>Math.floor(g*1.15));
      const p1 = usdt.methods.approve(CONFIG.autoStaker, usdtWei).send({ from: account, gas: gas1 });
      p1.on("transactionHash", h => toast("üì§ Approve ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß\nTx: "+h))
        .on("receipt", () => toast("‚úÖ Approve ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"));
      await p1;
    }

    // 2) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì minKJC ‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏±‡∏ô slippage ~2%)
    const out = await router.methods.getAmountsOut(usdtWei, [CONFIG.usdt, CONFIG.kjc]).call();
    const minKJC = web3.utils.toBN(out[1]).muln(98).divn(100);

    // 3) ‡∏™‡πà‡∏á buyAndStake
    toast("‚è≥ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Buy & Stake‚Ä¶");
    const gas2 = await staker.methods.buyAndStake(usdtWei, minKJC).estimateGas({ from: account, value: 0 }).then(g=>Math.floor(g*1.20));
    const p2 = staker.methods.buyAndStake(usdtWei, minKJC).send({ from: account, gas: gas2, value: 0 });
    p2.on("transactionHash", h => toast("üì§ ‡∏™‡πà‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß\n‡∏î‡∏π‡∏ö‡∏ô BscScan: "+h))
      .on("receipt", () => { toast("‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); fetchAndRenderUser().catch(()=>{}); })
      .on("error", e => { throw e; });
    await p2;
  } catch (e) { console.error(e); toast("‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: "+(e?.message||e)); }
}

// ---------- Claim ----------
async function claimStakingReward() {
  try {
    const gas = await staker.methods.claimStakingReward().estimateGas({ from: account }).then(g=>Math.floor(g*1.15));
    const p = staker.methods.claimStakingReward().send({ from: account, gas });
    p.on("transactionHash", h => toast("üì§ ‡∏™‡πà‡∏á Claim Staking ‡πÅ‡∏•‡πâ‡∏ß\nTx: "+h))
     .on("receipt", () => { toast("‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Staking ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); fetchAndRenderUser().catch(()=>{}); });
    await p;
  } catch (e) { console.error(e); toast("Claim Staking ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: "+(e?.message||e)); }
}

async function claimReferralReward() {
  try {
    const gas = await staker.methods.claimReferralReward().estimateGas({ from: account }).then(g=>Math.floor(g*1.15));
    const p = staker.methods.claimReferralReward().send({ from: account, gas });
    p.on("transactionHash", h => toast("üì§ ‡∏™‡πà‡∏á Claim Referral ‡πÅ‡∏•‡πâ‡∏ß\nTx: "+h))
     .on("receipt", () => { toast("‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Referral ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); fetchAndRenderUser().catch(()=>{}); });
    await p;
  } catch (e) { console.error(e); toast("Claim Referral ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: "+(e?.message||e)); }
}

// ---------- Your Stake ----------
function fmtTime(ts){ if(!ts) return "-"; const n=Number(ts); if(!n) return "-"; return new Date(n*1000).toLocaleString(); }
function fromWei18(v){ try{ return web3.utils.fromWei(v,"ether"); }catch(_){ return "-"; } }
async function safe(p){ try{ return await p; }catch(_){ return null; } }
function setBtn(id, enabled, label){
  const b=document.getElementById(id); if(!b) return;
  if(label) b.textContent=label;
  if(enabled){ b.classList.remove("disabled"); b.removeAttribute("disabled"); }
  else{ b.classList.add("disabled"); b.setAttribute("disabled","disabled"); }
}

let unlockTimer;

async function fetchUserInfo(addr){
  // ‡∏à‡∏≤‡∏Å ABI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ‡πÑ‡∏°‡πà‡∏°‡∏µ stakedAmount/lastClaim/canWithdraw ‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å
  // ‡∏°‡∏µ users(addr) -> { referrer, referralRewards }
  // ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà CLAIM_INTERVAL/LOCK_DURATION ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô stake
  // ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ referralRewards + ‡∏û‡∏∂‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á withdraw/claim
  const [userTuple, ci, ld] = await Promise.all([
    safe(staker.methods.users(addr).call()),
    safe(staker.methods.CLAIM_INTERVAL().call()),
    safe(staker.methods.LOCK_DURATION().call())
  ]);

  return {
    refRewards: userTuple ? userTuple.referralRewards : "0",
    claimInterval: ci ? Number(ci) : 0,
    lockDuration: ld ? Number(ld) : 0
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stakedLP/lastClaim/unlock ‡∏à‡∏≤‡∏Å ABI ‡∏ô‡∏µ‡πâ
  };
}

async function fetchAndRenderUser(){
  if(!account) return;

  const u = await fetchUserInfo(account);

  // staked LP/‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏•‡∏°/‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å: ABI ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ getter ‚Üí ‡πÅ‡∏™‡∏î‡∏á "-" ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  document.getElementById("uiStakedLP").innerText = "-";
  document.getElementById("uiLastClaim").innerText = "-";
  document.getElementById("uiNextClaim").innerText = "-";
  document.getElementById("uiUnlockAt").innerText = "-";
  document.getElementById("uiCanWithdraw").innerText = "‚õìÔ∏è ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ö‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤)";

  // referral rewards (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å users[address].referralRewards)
  const refBN = web3.utils.toBN(u.refRewards || "0");
  document.getElementById("uiRefRewards").innerText = refBN.isZero() ? "-" : fromWei18(refBN.toString());

  // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ö‡∏ö conservative: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ nextClaim/minClaim ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)
  setBtn("btnClaimStake", true);
  setBtn("btnClaimRef", !refBN.isZero()); // ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏ó‡∏¥‡πâ‡∏á
  setBtn("btnWithdraw", true);            // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô can/can't
}

// ‡∏ñ‡∏≠‡∏ô LP
async function withdrawLP(){
  try{
    const btn = document.getElementById("btnWithdraw");
    if(btn && btn.hasAttribute("disabled")) return toast("‡∏¢‡∏±‡∏á‡∏ñ‡∏≠‡∏ô LP ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
    const gas = await staker.methods.withdrawLP().estimateGas({ from: account }).then(g=>Math.floor(g*1.15));
    const p = staker.methods.withdrawLP().send({ from: account, gas });
    p.on("transactionHash", h => toast("üì§ ‡∏™‡πà‡∏á Withdraw ‡πÅ‡∏•‡πâ‡∏ß\nTx: "+h))
     .on("receipt", () => { toast("‚úÖ ‡∏ñ‡∏≠‡∏ô LP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); fetchAndRenderUser().catch(()=>{}); });
    await p;
  }catch(e){ console.error(e); toast("‡∏ñ‡∏≠‡∏ô LP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: "+(e?.message||e)); }
}

// auto refresh
setInterval(()=>{ if(window.account) fetchAndRenderUser().catch(()=>{}); }, 15000);
